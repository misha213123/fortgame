from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from game import get_random_challenge, pass_challenge, load_fort_boyard_data, save_fort_boyard_data, get_hint_for_challenge
from database import save_user_data, load_user_profile, update_user_profile, save_message_to_sequence, load_pending_messages, delete_message_from_sequence
import os
import sqlite3
import random
import string
from datetime import datetime, timedelta

MANAGER_CHAT_ID = 551270027  # –ù–æ–≤—ã–π ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞
manager_stats = {"replies": 0, "start_time": datetime.now()}  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞
manager_info = {"first_name": "", "last_name": ""}  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ

async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE, new_registration=False):
    user_id = update.message.from_user.id
    stage, coins = load_fort_boyard_data(user_id)
    profile_data = load_user_profile(user_id)

    if user_id == MANAGER_CHAT_ID:
        if not manager_info["first_name"] or not manager_info["last_name"]:
            await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –≤–≤–µ–¥—è —Å–≤–æ–µ –∏–º—è:')
            context.user_data['step'] = 'manager_first_name'
        else:
            keyboard = [
                ["üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π", "üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞"],
                ["üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False, resize_keyboard=True)
            await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞.", reply_markup=reply_markup)
    elif profile_data:
        keyboard = [
            ["üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "üõí –ú–∞–≥–∞–∑–∏–Ω"],
            ["‚ÑπÔ∏è –û –Ω–∞—Å", "üè∞ –ü—Ä–æ–π—Ç–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ"],
            ["üèÜ –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤", "üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É"],
            ["üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False, resize_keyboard=True)
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=reply_markup)
    else:
        keyboard = [
            ["üöÄ –ù–∞—á–∞—Ç—å", "‚ÑπÔ∏è –û –Ω–∞—Å"],
            ["üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False, resize_keyboard=True)
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å'.", reply_markup=reply_markup)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await welcome(update, context)

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    if user_id == MANAGER_CHAT_ID:
        if 'step' in context.user_data:
            step = context.user_data['step']
            if step == 'manager_first_name':
                manager_info["first_name"] = text
                context.user_data['step'] = 'manager_last_name'
                await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:')
            elif step == 'manager_last_name':
                manager_info["last_name"] = text
                del context.user_data['step']
                await update.message.reply_text('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.')
                keyboard = [
                    ["üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π", "üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞"],
                    ["üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False, resize_keyboard=True)
                await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞.", reply_markup=reply_markup)
        else:
            await handle_manager_commands(update, context, text)
        return

    if text == "üöÄ –ù–∞—á–∞—Ç—å":
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
        context.user_data['step'] = 'first_name'
    elif text == "‚ÑπÔ∏è –û –Ω–∞—Å":
        await update.message.reply_text(
            "–ú—ã –∫–æ–º–∞–Ω–¥–∞, –≥–æ—Ç–æ–≤–∞—è –∫ –Ω–æ–≤—ã–º –≤—ã–∑–æ–≤–∞–º –∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º! üåü\n\n"
            "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞–º–∏ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö:\n"
            "Instagram: —Å—Å—ã–ª–∫–∞\n"
            "VK: —Å—Å—ã–ª–∫–∞\n"
            "Telegram: —Å—Å—ã–ª–∫–∞\n\n"
            "–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n"
            "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: –Ω–æ–º–µ—Ä\n"
            "–í—Ç–æ—Ä–æ–π –Ω–æ–º–µ—Ä: –Ω–æ–º–µ—Ä\n"
            "Email: –ø–æ—á—Ç–∞\n"
            "–°–∞–π—Ç: —Å–∞–π—Ç\n"
        )
    elif text == "üè∞ –ü—Ä–æ–π—Ç–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ":
        db_path = os.path.join(os.path.dirname(__file__), 'users.db')
        conn = sqlite3.connect(db_path, check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        data = cursor.fetchone()
        conn.close()

        if data:
            keyboard = [
                ["üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "üõí –ú–∞–≥–∞–∑–∏–Ω"],
                ["‚ÑπÔ∏è –û –Ω–∞—Å", "üè∞ –ü—Ä–æ–π—Ç–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ"],
                ["üèÜ –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤", "üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É"],
                ["üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False, resize_keyboard=True)
            await update.message.reply_text("–ò—Å–ø—ã—Ç–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!", reply_markup=reply_markup)
            await fort_boyard(update, context)
        else:
            await update.message.reply_text("–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å'.")
    elif text == "üèÜ –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤":
        await leaderboard(update, context)
    elif text == "üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É":
        stage, coins = load_fort_boyard_data(user_id)
        if stage == 0:
            await update.message.reply_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∏–≥—Ä—ã. –ù–∞–∂–º–∏—Ç–µ 'üè∞ –ü—Ä–æ–π—Ç–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        elif coins >= 5:
            keyboard = [
                [InlineKeyboardButton("–î–∞", callback_data="confirm_hint")],
                [InlineKeyboardButton("–ù–µ—Ç", callback_data="cancel_hint")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Å—Ç–æ–∏—Ç 5 –º–æ–Ω–µ—Ç. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É?", reply_markup=reply_markup)
        else:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏. –ü–æ–¥—Å–∫–∞–∑–∫–∞ —Å—Ç–æ–∏—Ç 5 –º–æ–Ω–µ—Ç.")
    elif text == "üõí –ú–∞–≥–∞–∑–∏–Ω":
        await show_shop(update, context)
    elif text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        await show_profile(update, context)
    elif text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º":
        context.user_data['awaiting_message'] = True
        await update.message.reply_text("–°–≤–æ–±–æ–¥–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    elif text == "–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã":
        await exit_game(update, context)
    elif 'step' in context.user_data:
        step = context.user_data['step']

        if step == 'first_name':
            context.user_data['first_name'] = text
            context.user_data['step'] = 'last_name'
            await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:')
        elif step == 'last_name':
            context.user_data['last_name'] = text
            context.user_data['step'] = 'phone_number'
            await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
        elif step == 'phone_number':
            context.user_data['phone_number'] = text
            context.user_data['step'] = 'city'
            await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:')
        elif step == 'city':
            context.user_data['city'] = text
            save_user_data(user_id, context.user_data['first_name'], context.user_data['last_name'], context.user_data['phone_number'], context.user_data['city'])
            del context.user_data['step']
            await welcome(update, context, new_registration=True)  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    elif 'awaiting_message' in context.user_data:
        context.user_data.pop('awaiting_message')
        save_message_to_sequence(user_id, text)
        await send_message_to_manager(update, context, text)

async def send_message_to_manager(update: Update, context: ContextTypes.DEFAULT_TYPE, message: str):
    user = update.message.from_user
    try:
        await context.bot.send_message(
            chat_id=MANAGER_CHAT_ID,
            text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.first_name} {user.last_name} (@{user.username}): {message}"
        )
        await update.message.reply_text("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    except Exception as e:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Error sending message to manager: {e}")

async def fort_boyard(update: Update, context: ContextTypes.DEFAULT_TYPE, use_hint=False):
    user_id = update.message.from_user.id
    stage, coins = load_fort_boyard_data(user_id)
    challenge = context.user_data['current_challenge'] if use_hint else get_random_challenge()

    if challenge:
        question = challenge["question"]
        options = challenge["options"]

        keyboard = [
            [InlineKeyboardButton(option, callback_data=f"challenge_{stage}_{option}")]
            for option in options
        ]
        keyboard.append([InlineKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã", callback_data=f"challenge_{stage}_exit")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        context.user_data['answer'] = challenge['answer']
        context.user_data['current_question'] = question
        context.user_data['current_options'] = options
        context.user_data['stage'] = stage
        context.user_data['current_challenge'] = challenge
        print(f"Fort Boyard: Stage {stage}, Question: {question}, Answer: {challenge['answer']}, Options: {options}")
        await update.message.reply_text(f"{question}", reply_markup=reply_markup)
    else:
        await update.message.reply_text("–í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!")

async def fort_boyard_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data.split("_")
    stage = int(data[1])
    selected_option = data[2]

    if selected_option == "exit":
        await query.message.delete()
        await query.message.reply_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∏–≥—Ä—ã.")
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã
        profile_data = load_user_profile(user_id)
        keyboard = [
            ["üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "üõí –ú–∞–≥–∞–∑–∏–Ω"],
            ["‚ÑπÔ∏è –û –Ω–∞—Å", "üè∞ –ü—Ä–æ–π—Ç–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ"],
            ["üèÜ –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤"],
            ["üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False, resize_keyboard=True)
        await context.bot.send_message(chat_id=query.message.chat_id, text="–¢–µ–ø–µ—Ä—å –≤—ã –≤—ã—à–ª–∏ –∏–∑ –∏–≥—Ä—ã.", reply_markup=reply_markup)
        return

    print(f"Selected option (callback): {selected_option}")
    print(f"Expected stage: {stage}")
    print(f"Current stage in context: {context.user_data.get('stage')}")

    if selected_option == "retry":
        question = context.user_data.get('current_question')
        options = context.user_data.get('current_options')
        keyboard = [
            [InlineKeyboardButton(option, callback_data=f"challenge_{context.user_data['stage']}_{option}")]
            for option in options
        ]
        keyboard.append([InlineKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã", callback_data=f"challenge_{context.user_data['stage']}_exit")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f"{question}", reply_markup=reply_markup)
    else:
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞
        challenge = context.user_data['current_challenge']
        correct_answer = challenge['answer']
        print(f"Selected option: {selected_option}")
        print(f"Correct answer: {correct_answer}")

        success, message, new_stage, coins = pass_challenge(user_id, selected_option, challenge)
        print(f"Challenge result: {success}")

        if success:
            context.user_data['stage'] = new_stage  # –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            correct_answers = context.user_data.get('correct_answers', 0) + 1
            context.user_data['correct_answers'] = correct_answers
            update_user_profile(user_id, correct_answers=correct_answers)
            await query.edit_message_text(message)
            await fort_boyard(query, context)  # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏—Å–ø—ã—Ç–∞–Ω–∏—é
        else:
            keyboard = [
                [InlineKeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"challenge_{stage}_retry")],
                [InlineKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã", callback_data=f"challenge_{stage}_exit")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.delete()  # —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
            await query.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞?", reply_markup=reply_markup)

async def show_shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    stage, coins = load_fort_boyard_data(user_id)
    profile_data = load_user_profile(user_id)
    purchases = profile_data[5] if profile_data else ""

    if not isinstance(purchases, str):
        purchases = ""

    keyboard = []
    if "–°–∫–∏–¥–∫–∞ –Ω–∞ –∏–≥—Ä—É" not in purchases:
        keyboard.append([InlineKeyboardButton("–°–∫–∏–¥–∫–∞ –Ω–∞ –∏–≥—Ä—É (100 –º–æ–Ω–µ—Ç)", callback_data="shop_discount")])
    else:
        keyboard.append([InlineKeyboardButton("–°–∫–∏–¥–∫–∞ –Ω–∞ –∏–≥—Ä—É (—É–∂–µ –∫—É–ø–ª–µ–Ω–∞)", callback_data="shop_discount")])
    keyboard.append([InlineKeyboardButton("–°—É–≤–µ–Ω–∏—Ä (50 –º–æ–Ω–µ—Ç)", callback_data="shop_souvenir")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω! –í–∞—à –±–∞–ª–∞–Ω—Å: {coins} –º–æ–Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=reply_markup)

async def handle_shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    choice = query.data.split("_")[1]
    stage, coins = load_fort_boyard_data(user_id)
    profile_data = load_user_profile(user_id)
    purchases = profile_data[5] if profile_data else ""

    if not isinstance(purchases, str):
        purchases = ""

    if choice == "discount":
        if "–°–∫–∏–¥–∫–∞ –Ω–∞ –∏–≥—Ä—É" in purchases:
            await query.edit_message_text("–í—ã —É–∂–µ –∫—É–ø–∏–ª–∏ —Å–∫–∏–¥–∫—É –Ω–∞ –∏–≥—Ä—É.")
        elif coins >= 100:
            coins -= 100
            save_fort_boyard_data(user_id, stage, coins)
            promo_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
            purchases += f"–°–∫–∏–¥–∫–∞ –Ω–∞ –∏–≥—Ä—É (–ü—Ä–æ–º–æ–∫–æ–¥: {promo_code}), "
            update_user_profile(user_id, purchases=purchases)
            await query.edit_message_text(f"–í—ã –∫—É–ø–∏–ª–∏ —Å–∫–∏–¥–∫—É –Ω–∞ –∏–≥—Ä—É! –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: {promo_code}. –ü–æ–∫–∞–∂–∏—Ç–µ –µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π –∫–≤–µ—Å—Ç–∞.")
        else:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å–∫–∏–¥–∫–∏.")
    elif choice == "souvenir":
        if coins >= 50:
            coins -= 50
            save_fort_boyard_data(user_id, stage, coins)
            purchases += "–°—É–≤–µ–Ω–∏—Ä, "
            update_user_profile(user_id, purchases=purchases)
            await query.edit_message_text("–í—ã –∫—É–ø–∏–ª–∏ —Å—É–≤–µ–Ω–∏—Ä! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É.")
    elif choice == "exit_game":
        await exit_game(update, context)

async def leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db_path = os.path.join(os.path.dirname(__file__), 'users.db')
    conn = sqlite3.connect(db_path, check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("""
        SELECT users.first_name, users.last_name, fort_boyard.coins 
        FROM users 
        JOIN fort_boyard ON users.user_id = fort_boyard.user_id 
        ORDER BY fort_boyard.coins DESC 
        LIMIT 10
    """)
    leaderboard_data = cursor.fetchall()
    conn.close()

    leaderboard_text = "üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤:\n\n"
    for i, (first_name, last_name, coins) in enumerate(leaderboard_data):
        leaderboard_text += f"{i + 1}. {first_name} {last_name} - {coins} –º–æ–Ω–µ—Ç\n"

    await update.message.reply_text(leaderboard_text)

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    profile_data = load_user_profile(user_id)

    if profile_data:
        first_name, last_name, phone_number, city, coins, purchases, correct_answers, fort_boyard_stage = profile_data
        purchases_text = purchases if purchases else "–ù–µ—Ç –ø–æ–∫—É–ø–æ–∫"
        profile_text = (
            f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>:\n\n"
            f"<b>–ò–º—è:</b> {first_name}\n"
            f"<b>–§–∞–º–∏–ª–∏—è:</b> {last_name}\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone_number}\n"
            f"<b>–ì–æ—Ä–æ–¥:</b> {city}\n"
            f"<b>–ú–æ–Ω–µ—Ç—ã:</b> {coins}\n"
            f"<b>–ü–æ–∫—É–ø–∫–∏:</b> {purchases_text}\n"
            f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:</b> {correct_answers}\n"
            f"<b>–≠—Ç–∞–ø –§–æ—Ä—Ç –ë–æ—è—Ä–¥:</b> {fort_boyard_stage}\n"
        )
    else:
        profile_text = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."

    await update.message.reply_text(profile_text, parse_mode='HTML')

async def view_client_profile(update: Update, context: ContextTypes.DEFAULT_TYPE, client_id: int):
    profile_data = load_user_profile(client_id)
    if profile_data:
        first_name, last_name, phone_number, city, coins, purchases, correct_answers, fort_boyard_stage = profile_data
        purchases_text = purchases if purchases else "–ù–µ—Ç –ø–æ–∫—É–ø–æ–∫"
        profile_text = (
            f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>:\n\n"
            f"<b>–ò–º—è:</b> {first_name}\n"
            f"<b>–§–∞–º–∏–ª–∏—è:</b> {last_name}\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone_number}\n"
            f"<b>–ì–æ—Ä–æ–¥:</b> {city}\n"
            f"<b>–ú–æ–Ω–µ—Ç—ã:</b> {coins}\n"
            f"<b>–ü–æ–∫—É–ø–∫–∏:</b> {purchases_text}\n"
            f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:</b> {correct_answers}\n"
            f"<b>–≠—Ç–∞–ø –§–æ—Ä—Ç –ë–æ—è—Ä–¥:</b> {fort_boyard_stage}\n"
        )
    else:
        profile_text = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
    await update.message.reply_text(profile_text, parse_mode='HTML')


async def use_hint(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    if query.data == "confirm_hint":
        stage, coins = load_fort_boyard_data(user_id)
        if stage == 0:
            await query.edit_message_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∏–≥—Ä—ã. –ù–∞–∂–º–∏—Ç–µ 'üè∞ –ü—Ä–æ–π—Ç–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        elif coins >= 5:
            coins -= 5
            save_fort_boyard_data(user_id, stage, coins)
            hint = get_hint_for_challenge(context.user_data['current_challenge'])
            await query.edit_message_text(f"–ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø—ã—Ç–∞–Ω–∏—è: {hint}")
            await fort_boyard(query, context, use_hint=True)  # –°–Ω–æ–≤–∞ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        else:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏.")
    elif query.data == "cancel_hint":
        await query.edit_message_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

async def exit_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    context.user_data['stage'] = 0  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–¥–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    await query.message.reply_text("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!")
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã
    user_id = query.from_user.id
    profile_data = load_user_profile(user_id)
    keyboard = [
        ["üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "üõí –ú–∞–≥–∞–∑–∏–Ω"],
        ["‚ÑπÔ∏è –û –Ω–∞—Å", "üè∞ –ü—Ä–æ–π—Ç–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ"],
        ["üèÜ –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤"],
        ["üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False, resize_keyboard=True)
    await context.bot.send_message(chat_id=query.message.chat_id, text="–¢–µ–ø–µ—Ä—å –≤—ã –≤—ã—à–ª–∏ –∏–∑ –∏–≥—Ä—ã.", reply_markup=reply_markup)

async def contact_manager(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    context.user_data['awaiting_message'] = True
    await update.message.reply_text("–°–≤–æ–±–æ–¥–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")

async def handle_manager_commands(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    if text == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π":
        await view_pending_messages(update, context)
    elif text == "üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:")
        context.user_data['awaiting_client_id'] = True
    elif text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await view_manager_profile(update, context)
    elif 'awaiting_client_id' in context.user_data:
        client_id = int(text)
        await view_client_profile(update, context, client_id)
        del context.user_data['awaiting_client_id']

async def view_pending_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pending_messages = load_pending_messages()
    if not pending_messages:
        await update.message.reply_text("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤.")
        return

    keyboard = []
    for user_id, message in pending_messages:
        profile_data = load_user_profile(user_id)
        if profile_data:
            first_name, last_name, phone_number, city, coins, purchases, correct_answers, fort_boyard_stage = profile_data
            keyboard.append([InlineKeyboardButton(f"–û—Ç–≤–µ—Ç–∏—Ç—å {first_name} {last_name}", callback_data=f"reply_{user_id}")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å:", reply_markup=reply_markup)

async def reply_to_client(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = int(query.data.split('_')[1])
    context.user_data['reply_to'] = user_id
    profile_data = load_user_profile(user_id)
    if profile_data:
        first_name, last_name, phone_number, city, coins, purchases, correct_answers, fort_boyard_stage = profile_data
        await query.message.reply_text(f"–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {first_name} {last_name}:")

async def forward_message_to_client(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'reply_to' in context.user_data:
        user_id = context.user_data.pop('reply_to')
        try:
            print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}")
            await context.bot.send_message(
                chat_id=user_id,
                text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {manager_info['first_name']} {manager_info['last_name']}: {update.message.text}"
            )
            manager_stats['replies'] += 1
            await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            delete_message_from_sequence(user_id)  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É: {e}")
            print(f"Error sending message to client: {e}")

async def view_manager_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    elapsed_time = datetime.now() - manager_stats['start_time']
    elapsed_time_str = str(timedelta(seconds=elapsed_time.seconds))  # –£–±–∏—Ä–∞–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
    profile_text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞</b>:\n\n"
        f"–ò–º—è: {manager_info['first_name']}\n"
        f"–§–∞–º–∏–ª–∏—è: {manager_info['last_name']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤: {manager_stats['replies']}\n"
        f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {elapsed_time_str}\n"
    )
    await update.message.reply_text(profile_text, parse_mode='HTML')

async def view_client_profile(update: Update, context: ContextTypes.DEFAULT_TYPE, client_id: int):
    profile_data = load_user_profile(client_id)
    if profile_data:
        first_name, last_name, phone_number, city, coins, purchases, correct_answers, fort_boyard_stage = profile_data
        purchases_text = purchases if purchases else "–ù–µ—Ç –ø–æ–∫—É–ø–æ–∫"
        profile_text = (
            f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>:\n\n"
            f"<b>–ò–º—è:</b> {first_name}\n"
            f"<b>–§–∞–º–∏–ª–∏—è:</b> {last_name}\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone_number}\n"
            f"<b>–ì–æ—Ä–æ–¥:</–±> {city}\n"
            f"<b>–ú–æ–Ω–µ—Ç—ã:</–±> {coins}\n"
            f"<b>–ü–æ–∫—É–ø–∫–∏:</–±> {purchases_text}\n"
            f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:</–±> {correct_answers}\n"
            f"<b>–≠—Ç–∞–ø –§–æ—Ä—Ç –ë–æ—è—Ä–¥:</–±> {fort_boyard_stage}\n"
        )
    else:
        profile_text = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
    await update.message.reply_text(profile_text, parse_mode='HTML')
